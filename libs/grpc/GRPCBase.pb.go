// Code generated by protoc-gen-go. DO NOT EDIT.
// source: GRPCBase.proto

/*
Package GRPC is a generated protocol buffer package.

It is generated from these files:
	GRPCBase.proto

It has these top-level messages:
	BaseRequest
	BaseResponse
*/
package GRPC

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BaseRequest struct {
	Service string `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	Method  string `protobuf:"bytes,2,opt,name=method" json:"method,omitempty"`
	Params  []byte `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
	ReqAt   int64  `protobuf:"varint,4,opt,name=req_at,json=reqAt" json:"req_at,omitempty"`
}

func (m *BaseRequest) Reset()                    { *m = BaseRequest{} }
func (m *BaseRequest) String() string            { return proto.CompactTextString(m) }
func (*BaseRequest) ProtoMessage()               {}
func (*BaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BaseRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *BaseRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *BaseRequest) GetParams() []byte {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *BaseRequest) GetReqAt() int64 {
	if m != nil {
		return m.ReqAt
	}
	return 0
}

type BaseResponse struct {
	Error  string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Result []byte `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	ResAt  int64  `protobuf:"varint,3,opt,name=res_at,json=resAt" json:"res_at,omitempty"`
}

func (m *BaseResponse) Reset()                    { *m = BaseResponse{} }
func (m *BaseResponse) String() string            { return proto.CompactTextString(m) }
func (*BaseResponse) ProtoMessage()               {}
func (*BaseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BaseResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *BaseResponse) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *BaseResponse) GetResAt() int64 {
	if m != nil {
		return m.ResAt
	}
	return 0
}

func init() {
	proto.RegisterType((*BaseRequest)(nil), "GRPC.BaseRequest")
	proto.RegisterType((*BaseResponse)(nil), "GRPC.BaseResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GRPCService service

type GRPCServiceClient interface {
	Execute(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (*BaseResponse, error)
}

type gRPCServiceClient struct {
	cc *grpc.ClientConn
}

func NewGRPCServiceClient(cc *grpc.ClientConn) GRPCServiceClient {
	return &gRPCServiceClient{cc}
}

func (c *gRPCServiceClient) Execute(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := grpc.Invoke(ctx, "/GRPC.GRPCService/Execute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GRPCService service

type GRPCServiceServer interface {
	Execute(context.Context, *BaseRequest) (*BaseResponse, error)
}

func RegisterGRPCServiceServer(s *grpc.Server, srv GRPCServiceServer) {
	s.RegisterService(&_GRPCService_serviceDesc, srv)
}

func _GRPCService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GRPC.GRPCService/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServiceServer).Execute(ctx, req.(*BaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GRPCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "GRPC.GRPCService",
	HandlerType: (*GRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _GRPCService_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "GRPCBase.proto",
}

func init() { proto.RegisterFile("GRPCBase.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0x89, 0xdd, 0xed, 0xe2, 0x6c, 0x11, 0x0c, 0x2a, 0xc1, 0x53, 0xd9, 0x53, 0x4f, 0x45,
	0xf4, 0x01, 0xa4, 0x8a, 0x78, 0x95, 0xf4, 0x01, 0x24, 0xd6, 0x01, 0x05, 0xdb, 0xb4, 0x33, 0x53,
	0xf1, 0xf1, 0x25, 0x4d, 0x0a, 0x3d, 0x7e, 0xff, 0xc0, 0xf7, 0xcf, 0x0c, 0x5c, 0xbc, 0xda, 0xb7,
	0xe7, 0x27, 0xc7, 0x58, 0x8f, 0xe4, 0xc5, 0xeb, 0x5d, 0xe0, 0xd3, 0x00, 0xc7, 0x90, 0x59, 0x9c,
	0x66, 0x64, 0xd1, 0x06, 0x0e, 0x8c, 0xf4, 0xfb, 0xdd, 0xa1, 0x51, 0xa5, 0xaa, 0xce, 0xed, 0x8a,
	0xfa, 0x06, 0xf2, 0x1e, 0xe5, 0xcb, 0x7f, 0x9a, 0xb3, 0x65, 0x90, 0x28, 0xe4, 0xa3, 0x23, 0xd7,
	0xb3, 0xc9, 0x4a, 0x55, 0x15, 0x36, 0x91, 0xbe, 0x86, 0x9c, 0x70, 0x7a, 0x77, 0x62, 0x76, 0xa5,
	0xaa, 0x32, 0xbb, 0x27, 0x9c, 0x1a, 0x39, 0xb5, 0x50, 0xc4, 0x3e, 0x1e, 0xfd, 0xc0, 0xa8, 0xaf,
	0x60, 0x8f, 0x44, 0x9e, 0x52, 0x5d, 0x84, 0x20, 0x25, 0xe4, 0xf9, 0x47, 0x96, 0xb2, 0xc2, 0x26,
	0x8a, 0x52, 0x0e, 0xd2, 0x6c, 0x95, 0x72, 0x23, 0xf7, 0x8f, 0x70, 0x0c, 0xc7, 0xb4, 0x69, 0xd5,
	0x3b, 0x38, 0xbc, 0xfc, 0x61, 0x37, 0x0b, 0xea, 0xcb, 0x3a, 0x0c, 0xea, 0xcd, 0x89, 0xb7, 0x7a,
	0x1b, 0xc5, 0x2d, 0x3e, 0xf2, 0xe5, 0x25, 0x0f, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x52, 0x69,
	0xe3, 0x57, 0x24, 0x01, 0x00, 0x00,
}
